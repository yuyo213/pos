/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package poscnsl2;

import java.awt.Color;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import java.sql.*;
import java.awt.event.KeyEvent;
import java.security.MessageDigest;
import java.security.SecureRandom;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Butaw
 */
public class mainFrame extends javax.swing.JFrame {

    /**
     * @return the lblCurStock
     */
    public javax.swing.JLabel getLblCurStock() {
        return lblCurStock;
    }

    /**
     * @param lblCurStock the lblCurStock to set
     */
    public void setLblCurStock(javax.swing.JLabel lblCurStock) {
        this.lblCurStock = lblCurStock;
    }

    /**
     * @return the CurStock
     *
     * private int quant;
     *
     * /
     **
     * @return the tfQuantity
     */
    public javax.swing.JTextField getTfQuantity() {
        return tfQuantity;
    }

    /**
     * @param tfQuantity the tfQuantity to set
     */
    public void setTfQuantity(javax.swing.JTextField tfQuantity) {
        this.tfQuantity = tfQuantity;
    }

    /**
     * Creates new form mainFrame
     */
    int w = 720, h = 740;
    OptionPanel optP = new OptionPanel();
    Connection con = My_Connection.dbConnection();

    public mainFrame() {
        initComponents();
        Date d = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        SimpleDateFormat stf = new SimpleDateFormat("HH:mm:ss");
        lblDate.setText(sdf.format(d));
        time();
        // update2();
        // add(optP);
        // optP.setSize(w, h);
        setLocationRelativeTo(null);
        setResizable(false);
        tfItemCode.requestFocus();
        transIDs();
        updateTableStock();
        bReset.setEnabled(false);

    }

    public void ButtonSwitch() {
        baddItem.setEnabled(false);
        bDelete.setEnabled(false);
        bcashOut.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelFrame = new javax.swing.JPanel();
        MainPanel = new javax.swing.JPanel();
        tablePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        opPanel = new javax.swing.JPanel();
        baddItem = new javax.swing.JButton();
        bcashOut = new javax.swing.JButton();
        bReset = new javax.swing.JButton();
        bOption = new javax.swing.JButton();
        bItemViewer = new javax.swing.JButton();
        bDelete = new javax.swing.JButton();
        searchPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tfItemCode = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        tfID = new javax.swing.JTextField();
        pricePanel = new javax.swing.JPanel();
        tfQuantity = new javax.swing.JTextField();
        lblPrice = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblTime = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lblTransaction = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        lblTotStock = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        lblCurStock = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblExchange = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        lblExit = new javax.swing.JLabel();
        itemViewer = new javax.swing.JPanel();
        tablePanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableStock = new javax.swing.JTable();
        ItemBack = new javax.swing.JButton();
        panelOption = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        PanelFrame.setLayout(new java.awt.CardLayout());

        tablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Item"));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Price", "Quantity", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout tablePanelLayout = new javax.swing.GroupLayout(tablePanel);
        tablePanel.setLayout(tablePanelLayout);
        tablePanelLayout.setHorizontalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        tablePanelLayout.setVerticalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
        );

        opPanel.setBackground(new java.awt.Color(255, 255, 255));
        opPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        baddItem.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        baddItem.setText("Add Item");
        baddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baddItemActionPerformed(evt);
            }
        });

        bcashOut.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        bcashOut.setText("Cash Out");
        bcashOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bcashOutActionPerformed(evt);
            }
        });

        bReset.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        bReset.setText("New Transaction");
        bReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bResetActionPerformed(evt);
            }
        });

        bOption.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        bOption.setText("Options");
        bOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOptionActionPerformed(evt);
            }
        });

        bItemViewer.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        bItemViewer.setText("Item Viewer");
        bItemViewer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bItemViewerActionPerformed(evt);
            }
        });

        bDelete.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        bDelete.setText("Delete Item");
        bDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout opPanelLayout = new javax.swing.GroupLayout(opPanel);
        opPanel.setLayout(opPanelLayout);
        opPanelLayout.setHorizontalGroup(
            opPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, opPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(opPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(bItemViewer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bOption, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bReset, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                    .addComponent(bcashOut, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(baddItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        opPanelLayout.setVerticalGroup(
            opPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(opPanelLayout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(baddItem, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bOption, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bcashOut, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bReset, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bItemViewer, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        searchPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jLabel1.setText("Item Code:");

        tfItemCode.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        tfItemCode.setForeground(new java.awt.Color(51, 51, 51));
        tfItemCode.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray));
        tfItemCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfItemCodeKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfItemCodeKeyTyped(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jLabel8.setText("ID:");

        tfID.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        tfID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfIDKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfIDKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfID, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfItemCode, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(tfID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfItemCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pricePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pricePanel.setLayout(null);

        tfQuantity.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        tfQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfQuantityKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfQuantityKeyTyped(evt);
            }
        });
        pricePanel.add(tfQuantity);
        tfQuantity.setBounds(130, 160, 128, 26);

        lblPrice.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        lblPrice.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pricePanel.add(lblPrice);
        lblPrice.setBounds(130, 40, 128, 30);

        jLabel2.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jLabel2.setText("Price:");
        pricePanel.add(jLabel2);
        jLabel2.setBounds(70, 40, 48, 30);

        jLabel3.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jLabel3.setText("Quantity:");
        pricePanel.add(jLabel3);
        jLabel3.setBounds(50, 160, 72, 31);

        lblDate.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        lblDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pricePanel.add(lblDate);
        lblDate.setBounds(495, 12, 167, 28);

        jLabel6.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jLabel6.setText("Date Today:");
        pricePanel.add(jLabel6);
        jLabel6.setBounds(401, 15, 88, 20);

        jLabel7.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jLabel7.setText("Time:");
        pricePanel.add(jLabel7);
        jLabel7.setBounds(449, 46, 40, 26);

        lblTime.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        lblTime.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pricePanel.add(lblTime);
        lblTime.setBounds(495, 46, 167, 29);

        lblName.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        lblName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pricePanel.add(lblName);
        lblName.setBounds(130, 10, 128, 25);

        jLabel10.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jLabel10.setText("Item Name:");
        pricePanel.add(jLabel10);
        jLabel10.setBounds(40, 10, 80, 20);

        jLabel9.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jLabel9.setText("Transaction ID:");
        pricePanel.add(jLabel9);
        jLabel9.setBounds(361, 83, 128, 31);

        lblTransaction.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        lblTransaction.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pricePanel.add(lblTransaction);
        lblTransaction.setBounds(495, 83, 167, 31);

        jLabel11.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jLabel11.setText("Total Stock:");
        pricePanel.add(jLabel11);
        jLabel11.setBounds(20, 80, 100, 30);

        lblTotStock.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        lblTotStock.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblTotStock.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lblTotStockKeyReleased(evt);
            }
        });
        pricePanel.add(lblTotStock);
        lblTotStock.setBounds(130, 80, 128, 27);

        jLabel12.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jLabel12.setText("Current Stock:");
        pricePanel.add(jLabel12);
        jLabel12.setBounds(10, 120, 120, 30);

        lblCurStock.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        lblCurStock.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pricePanel.add(lblCurStock);
        lblCurStock.setBounds(130, 120, 130, 30);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 204, 51));
        jLabel5.setText("Total:");

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 204, 51));
        jLabel4.setText("Exchange:");

        lblExchange.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N
        lblExchange.setForeground(new java.awt.Color(0, 204, 51));

        lblTotal.setBackground(new java.awt.Color(255, 255, 255));
        lblTotal.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N
        lblTotal.setForeground(new java.awt.Color(0, 204, 51));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblExchange, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblExchange, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)))
        );

        pricePanel.add(jPanel1);
        jPanel1.setBounds(280, 130, 410, 110);

        lblExit.setBackground(new java.awt.Color(204, 204, 204));
        lblExit.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        lblExit.setText("         Exit");
        lblExit.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblExitMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblExitMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblExitMouseExited(evt);
            }
        });

        javax.swing.GroupLayout MainPanelLayout = new javax.swing.GroupLayout(MainPanel);
        MainPanel.setLayout(MainPanelLayout);
        MainPanelLayout.setHorizontalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pricePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
                    .addGroup(MainPanelLayout.createSequentialGroup()
                        .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(MainPanelLayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(tablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(opPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblExit, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        MainPanelLayout.setVerticalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pricePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MainPanelLayout.createSequentialGroup()
                        .addComponent(opPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblExit, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(MainPanelLayout.createSequentialGroup()
                        .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        PanelFrame.add(MainPanel, "card2");

        tablePanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Item"));

        tableStock.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Item Name", "Stock"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableStock.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tableStock);

        javax.swing.GroupLayout tablePanel1Layout = new javax.swing.GroupLayout(tablePanel1);
        tablePanel1.setLayout(tablePanel1Layout);
        tablePanel1Layout.setHorizontalGroup(
            tablePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE)
        );
        tablePanel1Layout.setVerticalGroup(
            tablePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
        );

        ItemBack.setText("Back");
        ItemBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout itemViewerLayout = new javax.swing.GroupLayout(itemViewer);
        itemViewer.setLayout(itemViewerLayout);
        itemViewerLayout.setHorizontalGroup(
            itemViewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemViewerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ItemBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tablePanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        itemViewerLayout.setVerticalGroup(
            itemViewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, itemViewerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(itemViewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tablePanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ItemBack))
                .addContainerGap(556, Short.MAX_VALUE))
        );

        PanelFrame.add(itemViewer, "card4");

        getContentPane().add(PanelFrame, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        javax.swing.GroupLayout panelOptionLayout = new javax.swing.GroupLayout(panelOption);
        panelOption.setLayout(panelOptionLayout);
        panelOptionLayout.setHorizontalGroup(
            panelOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 720, Short.MAX_VALUE)
        );
        panelOptionLayout.setVerticalGroup(
            panelOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 740, Short.MAX_VALUE)
        );

        getContentPane().add(panelOption, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bResetActionPerformed
        // TODO add your handling code here:
        int input = JOptionPane.showOptionDialog(null, "New Transaction?", "Option",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, null, null);
        if (input == JOptionPane.OK_OPTION) {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            // model.getDataVector().removeAllElements();
            model.fireTableDataChanged();
            while (model.getRowCount() > 0) {
                model.removeRow(0);
            }
            clear();
            lblTotal.setText("");
            lblExchange.setText("");
            tfID.setText("");
            tfItemCode.setText("");
            baddItem.setEnabled(true);
            bDelete.setEnabled(true);
            bcashOut.setEnabled(true);
            bReset.setEnabled(false);
            transIDs();
        }
    }//GEN-LAST:event_bResetActionPerformed

    private void bOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOptionActionPerformed
        // OPTION
        PanelFrame.hide();
        panelOption.add(optP);
        panelOption.repaint();
        panelOption.revalidate();
        panelOption.show();
        optP.setBounds(0, 0, w, h);
    }//GEN-LAST:event_bOptionActionPerformed

    private void bItemViewerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bItemViewerActionPerformed
        MainPanel.hide();
        itemViewer.show();

    }//GEN-LAST:event_bItemViewerActionPerformed

    private void bcashOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bcashOutActionPerformed
        // putting money exchange

        if (lblTotal.getText().equals("0.0") || lblTotal.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Total is empty");
        } else {
            try {
                String money = JOptionPane.showInputDialog("Input Money");
                double tMoney = Double.parseDouble(money);
                double totalofItem = Double.parseDouble(lblTotal.getText());
                if (money == null || (money != null && ("".equals(money)))) {
                    throw new Exception("empty Fields");
                } else {
                    if (tMoney < totalofItem || money.equals("0")) {
                        JOptionPane.showMessageDialog(null, "Please Try again", "Invalid", 2);
                    } else {
                        double equals = tMoney - totalofItem;
                        lblExchange.setText(Double.toString(equals));
                        clear();
                        ButtonSwitch();
                        bReset.setEnabled(true);
                        lblCurStock.setText("");
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }

        }

    }//GEN-LAST:event_bcashOutActionPerformed

    private void tfItemCodeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfItemCodeKeyTyped
        // type item code
        numberonly(evt);
    }//GEN-LAST:event_tfItemCodeKeyTyped

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // table clicked

        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        int selectedRowIndex = jTable1.getSelectedRow();
        String name = (String) dtm.getValueAt(selectedRowIndex, 0);

        try {
            String query = "SELECT * FROM `itemLists` WHERE `ID` = ?";
            PreparedStatement pst = con.prepareStatement(query);
            pst.setString(1, name);

            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                tfID.setText(rs.getString("ID"));
                getTfQuantity().setText(rs.getString("name"));
                lblPrice.setText(rs.getString("price"));

//                 
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void tfItemCodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfItemCodeKeyReleased
        // relase key pressed / type item code (real)
        numberonly(evt);
        String itemCode = tfItemCode.getText();
        String quer = "code";
        idCode(quer, itemCode);
    }//GEN-LAST:event_tfItemCodeKeyReleased

    private void tfIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfIDKeyReleased
        numberonly(evt);
        PreparedStatement pst;
        String idKey = tfID.getText();
        String quer = "ID";
        idCode(quer, idKey);
    }//GEN-LAST:event_tfIDKeyReleased

    private void tfIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfIDKeyTyped
        numberonly(evt);
    }//GEN-LAST:event_tfIDKeyTyped

    private void tfQuantityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfQuantityKeyTyped
        numberonly(evt);
    }//GEN-LAST:event_tfQuantityKeyTyped

    private void baddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baddItemActionPerformed
        //adding the item
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        int row = jTable1.getRowCount();
        if (lblName.getText().equals("") || getTfQuantity().getText().equals("")
                || lblPrice.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "No selected item");
        } else {
            Double numPrice = Double.parseDouble(lblPrice.getText());
            Double numQuantity = Double.parseDouble(getTfQuantity().getText());
            Double resultPrice = numPrice * numQuantity;
            dtm.addRow(new Object[]{lblName.getText(), resultPrice,
                getTfQuantity().getText(), lblDate.getText()});// put object
            jTable1.changeSelection(jTable1.getRowCount(), 0, false, false);
            String itemName = (String) dtm.getValueAt(row, 0);
            String bItem = (String) dtm.getValueAt(row, 2);
            // DefaultTableModel tb1 = (DefaultTableModel) tableStock.getModel();
            char minus = '-';
            operators(minus, itemName, bItem);
        }
        clear();
        tfItemCode.setText("");
        tfID.setText("");
        getSum();

    }//GEN-LAST:event_baddItemActionPerformed

    private void bDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDeleteActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        int i = jTable1.getSelectedRow();
        String iName = (String) jTable1.getValueAt(i, 0);
        String Squant = (String) jTable1.getValueAt(i, 2);
        char op = '+';
        operators(op, iName, Squant);
        if (i >= 0) {
            dtm.removeRow(i);

        } else {
            JOptionPane.showMessageDialog(null, "Delete Error");
        }
        getSum();

    }//GEN-LAST:event_bDeleteActionPerformed

    private void lblExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblExitMouseClicked
        int input = JOptionPane.showOptionDialog(null, "Do you want to exit?", "Exit",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, null, null);
        if (input == JOptionPane.OK_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_lblExitMouseClicked

    private void lblExitMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblExitMouseEntered
        lblExit.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        lblExit.setForeground(Color.red);
    }//GEN-LAST:event_lblExitMouseEntered

    private void lblExitMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblExitMouseExited
        lblExit.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblExit.setForeground(Color.black);
    }//GEN-LAST:event_lblExitMouseExited

    private void lblTotStockKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lblTotStockKeyReleased
        // TODO add your handling code here:
        int a = Integer.parseInt(lblTotStock.getText());
        if (!lblTotStock.getText().isBlank()) {
            getLblCurStock().setText(Integer.toString(a));
        } else {
            autoSum();
        }
    }//GEN-LAST:event_lblTotStockKeyReleased

    private void tfQuantityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfQuantityKeyReleased
        // TODO add your handling code here:
        CurStock();
        autoSum();
    }//GEN-LAST:event_tfQuantityKeyReleased

    private void ItemBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemBackActionPerformed
        // TODO add your handling code here:
        itemViewer.hide();
        MainPanel.show();
    }//GEN-LAST:event_ItemBackActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int input = JOptionPane.showOptionDialog(null, "Do you want to exit?", "Exit",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, null, null);
        if (input == JOptionPane.OK_OPTION) {
            System.exit(0);
        } else {
            setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        }
    }//GEN-LAST:event_formWindowClosing
    private int autoSum() {
        int a, b, c;

        if (lblTotStock.getText().equals("") || tfQuantity.getText().equals("")
                || lblTotStock.getText().equals("") && tfQuantity.getText().equals("")
                || tfQuantity.getText().equals("") && lblTotStock.getText().equals("")) {
            a = 0;
            b = 0;
            c = 0;
            getLblCurStock().setText(Integer.toString(c));

            c = a - b;
            return (int) c;
        } else {
            a = Integer.parseInt(lblCurStock.getText());
            //a = Integer.parseInt(lblTotStock.getText());
            b = Integer.parseInt(tfQuantity.getText());
            if (b > a) {
                JOptionPane.showMessageDialog(null, "no negative number bois", "Invalid Input", 2);
                tfQuantity.setText("");
                c = 0;
                getLblCurStock().setText(Integer.toString(a));

                return (int) c;
            }
            c = a - b;
            getLblCurStock().setText(Integer.toString(c));

        }

        return (int) c;

    }

    public void CurStock() {
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        if (dtm.getRowCount() == 0) {
            jtabs(tableStock);
        } else {
            jtabs(tableStock);
        }
    }

    public void jtabs(JTable jtable) {
        DefaultTableModel tb1 = (DefaultTableModel) jtable.getModel();
        for (int i = 0; i < jtable.getRowCount(); i++) {
            for (int j = 0; j < jtable.getColumnCount(); j++) {
                if (jtable.getModel().getValueAt(i, j).equals(lblName.getText())) {
                    int tb2 = (int) tb1.getValueAt(i, 2);
                    lblCurStock.setText(Integer.toString(tb2));
                }
            }
        }
    }

    private void numberonly(KeyEvent evt) {
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }

    private void updateTableStock() {
        PreparedStatement pst;
        ResultSet rs;
        try {
            //   String sql = "select * from itemLists";
            String sql = "select ID,itemName as Name,itemStock as Stock from itemLists";
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            tableStock.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    private void operators(char operator, String iName, String bItem) {
        DefaultTableModel tb1 = (DefaultTableModel) tableStock.getModel();
        for (int i = 0; i < tableStock.getRowCount(); i++) {
            for (int j = 0; j < tableStock.getColumnCount(); j++) {
                if (tableStock.getModel().getValueAt(i, j).equals(iName)) {
                    System.out.println(tableStock.getValueAt(i, j));
                    int tStock = (int) tableStock.getValueAt(i, 2);
                    int num2 = Integer.parseInt(bItem);
                    switch (operator) {
                        case '+' -> {
                            int result = tStock + num2;
                            System.out.println(result);
                            tableStock.setValueAt(result, i, 2);
                        }
                        case '-' -> {
                            int result = tStock - num2;
                            System.out.println(result);
                            tableStock.setValueAt(result, i, 2);
                        }
                        default -> {
                            JOptionPane.showMessageDialog(null, "Error");
                        }

                    }

                    int tb2 = (int) tb1.getValueAt(i, 2);
                    if (tb2 < 0) {
                        JOptionPane.showMessageDialog(null, "Not enough item");
                    }

                }
            }
        }
    }

    private int getSum() {
        double tot = 0;
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            tot = tot + Double.parseDouble(jTable1.getValueAt(i, 1).toString());
        }
        lblTotal.setText(Double.toString(tot));

        return (int) tot;
    }

    private void idCode(String value, String sText) {
        PreparedStatement pst;
        ResultSet rs;
        int flg = 0;
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        try {
            String query = "Select * from itemLists where " + value + "=?";
            pst = con.prepareStatement(query);
            pst.setString(1, sText);
            rs = pst.executeQuery();
            if (rs.next() && flg == 0) {
                int iPrice = rs.getInt("itemPrice");
                lblName.setText(rs.getString("itemName"));
                lblPrice.setText(Integer.toString(iPrice));
                getTfQuantity().setText(rs.getString("itemQuantity"));
                lblTotStock.setText(Integer.toString(rs.getInt("itemStock")));
                CurStock();
                //  autoSum();
            } else if (flg == 0) {
                flg = 1;
                clear();
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void clear() {
        //Thread.sleep(150);
        lblName.setText("");
        lblPrice.setText("");
        getTfQuantity().setText("");
        lblTotStock.setText("");
        getLblCurStock().setText("");
    }

    private void update2() {
        PreparedStatement pst;
        ResultSet rs;
        try {
            //   String sql = "select * from itemLists";
            String sql = "select ID,itemName as Name,itemQuantity as Quantity,itemPrice as Price from itemLists";
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            jTable1.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    private void time() {
        Thread t = new Thread() {

            public void run() {
                while (true) {
                    SimpleDateFormat date = new SimpleDateFormat("hh:mm");
                    String dateString = date.format(new Date()).toString();
                    lblTime.setText(dateString);
                    try {
                        Thread.sleep(1);
                    } catch (Exception e) {

                    }
                }
            }
        };
        t.start();
    }

    private void transIDs() {
        //System.out.println(uniqueID);
        try {
            SecureRandom prng = SecureRandom.getInstance("SHA1PRNG");

            //generate a random number
            String randomNum = new Integer(prng.nextInt()).toString();

            //get its digest
            MessageDigest sha = MessageDigest.getInstance("SHA-1");
            byte[] result = sha.digest(randomNum.getBytes());

            //System.out.println("Random number: " + randomNum);
            lblTransaction.setText(randomNum);
            //  System.out.println("Message digest");
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void seller() {
        bOption.setEnabled(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ItemBack;
    private javax.swing.JPanel MainPanel;
    public static javax.swing.JPanel PanelFrame;
    private javax.swing.JButton bDelete;
    private javax.swing.JButton bItemViewer;
    private javax.swing.JButton bOption;
    private javax.swing.JButton bReset;
    private javax.swing.JButton baddItem;
    private javax.swing.JButton bcashOut;
    private javax.swing.JPanel itemViewer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblCurStock;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblExchange;
    private javax.swing.JLabel lblExit;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblTime;
    private javax.swing.JLabel lblTotStock;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JLabel lblTransaction;
    private javax.swing.JPanel opPanel;
    public static javax.swing.JPanel panelOption;
    private javax.swing.JPanel pricePanel;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JPanel tablePanel1;
    private javax.swing.JTable tableStock;
    private javax.swing.JTextField tfID;
    private javax.swing.JTextField tfItemCode;
    private javax.swing.JTextField tfQuantity;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the quant
     */
}
